<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simulation on </title>
    <link>https://shrenikm.com/tags/simulation/</link>
    <description>Recent content in Simulation on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Mar 2024 22:11:21 -0800</lastBuildDate>
    <atom:link href="https://shrenikm.com/tags/simulation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting Up a Robotic Manipulator</title>
      <link>https://shrenikm.com/posts/2024-03-08-setting-up-a-manipulator/</link>
      <pubDate>Fri, 08 Mar 2024 22:11:21 -0800</pubDate>
      <guid>https://shrenikm.com/posts/2024-03-08-setting-up-a-manipulator/</guid>
      <description>Let&amp;rsquo;s take a look at how we can set up a framework for streamlined simulation and hardware control of a manipulator. The robot under consideration is Ufactory&amp;rsquo;s Lite6 manipulator and the simulation/setup tool used is Drake.&#xA;All the code used in this post can be found in my repo. But before we start, some explanations are in order.&#xA;Lite6?&#xA;The Lite6 is one of the more economical (not to be confused with cheap) manipulators one can buy, especially for personal research where you&amp;rsquo;re not going to be spending tens of thousands of dollars on some of the more well established robots out there.</description>
    </item>
    <item>
      <title>Multi Vehicle Mixed Integer Programming</title>
      <link>https://shrenikm.com/posts/2023-12-24-multi-vehicle-mixed-integer-programming/</link>
      <pubDate>Sun, 24 Dec 2023 18:54:32 -0800</pubDate>
      <guid>https://shrenikm.com/posts/2023-12-24-multi-vehicle-mixed-integer-programming/</guid>
      <description>In this post, we take a look at this $[1]$ paper, which introduces a simple, yet interesting approach to solving a multi-vehicle path planning problem.&#xA;My implementation of the algorithm that was used to evaluate its performance and generate all the results in this post can be found here&#xA;$\newcommand{\ith}{i^{th}}$ $\newcommand{\pth}{p^{th}}$ $\newcommand{\qth}{q^{th}}$ $\newcommand{\lth}{l^{th}}$ $\newcommand{\MR}{\mathbb{R}}$ $\newcommand{\xpi}{x_{pi}}$ $\newcommand{\ypi}{y_{pi}}$ $\newcommand{\xqi}{x_{qi}}$ $\newcommand{\yqi}{y_{qi}}$ $\newcommand{\xmin}{x_{min}}$ $\newcommand{\xmax}{x_{max}}$ $\newcommand{\ymin}{y_{min}}$ $\newcommand{\ymax}{y_{max}}$ $\newcommand{\xlmin}{x_{l,min}}$ $\newcommand{\xlmax}{x_{l,max}}$ $\newcommand{\ylmin}{y_{l,min}}$ $\newcommand{\ylmax}{y_{l,max}}$ $\newcommand{\xlimin}{x_{li,min}}$ $\newcommand{\xlimax}{x_{li,max}}$ $\newcommand{\ylimin}{y_{li,min}}$ $\newcommand{\ylimax}{y_{li,max}}$ $\newcommand{\cplx}{c_{pl,x}}$ $\newcommand{\cply}{c_{pl,y}}$ $\newcommand{\dpqx}{d_{pq,x}}$ $\newcommand{\dpqy}{d_{pq,y}}$ $\newcommand{\tpli}{t_{pli}}$ $\newcommand{\spi}{s_{pi}}$ $\newcommand{\spij}{s_{pij}}$ $\newcommand{\spinext}{s_{p,i+1}}$ $\newcommand{\spn}{s_{pN}}$ $\newcommand{\spf}{s_{pf}}$ $\newcommand{\wpi}{w_{pi}}$ $\newcommand{\wpij}{w_{pij}}$ $\newcommand{\wpn}{w_{pN}}$ $\newcommand{\upi}{u_{pi}}$ $\newcommand{\upik}{u_{pik}}$ $\newcommand{\vpi}{v_{pi}}$ $\newcommand{\vpik}{v_{pik}}$ $\newcommand{\Ap}{A_{p}}$ $\newcommand{\Bp}{B_{p}}$ $\newcommand{\qp}{q_{p}}$ $\newcommand{\rp}{r_{p}}$ $\newcommand{\pp}{p_{p}}$</description>
    </item>
    <item>
      <title>Implicit Euler integration using Newton-Raphson</title>
      <link>https://shrenikm.com/posts/2021-09-25-implicit-euler-integration-using-newton-raphson/</link>
      <pubDate>Sat, 25 Sep 2021 20:11:57 -0700</pubDate>
      <guid>https://shrenikm.com/posts/2021-09-25-implicit-euler-integration-using-newton-raphson/</guid>
      <description>$\newcommand{\Dt}{\Delta t}$&#xA;We take a look at the implicit or backward Euler integration scheme for computing numerical solutions of ordinary differential equations. We will go over the process of integrating using the backward Euler method and make comparisons to the more well known forward Euler method.&#xA;Numerical integration is extremely important when it comes to simulating real world physical systems. For robotic systems, we usually have a continuous time state dynamics that tells us how the system behaves upon the application of a certain control signal.</description>
    </item>
  </channel>
</rss>
