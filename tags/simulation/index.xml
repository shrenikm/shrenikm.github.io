<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simulation on </title>
    <link>https://shrenikm.com/tags/simulation/</link>
    <description>Recent content in Simulation on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>shrenik95@gmail.com (Shrenik M)</managingEditor>
    <webMaster>shrenik95@gmail.com (Shrenik M)</webMaster>
    <lastBuildDate>Fri, 08 Mar 2024 22:11:21 -0800</lastBuildDate>
    <atom:link href="https://shrenikm.com/tags/simulation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting Up a Robotic Manipulator</title>
      <link>https://shrenikm.com/posts/2024-03-08-setting-up-a-manipulator/</link>
      <pubDate>Fri, 08 Mar 2024 22:11:21 -0800</pubDate><author>shrenik95@gmail.com (Shrenik M)</author>
      <guid>https://shrenikm.com/posts/2024-03-08-setting-up-a-manipulator/</guid>
      <description>&lt;!-- Post 7 --&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s take a look at how we can set up a framework for streamlined simulation and hardware control of a manipulator. The robot under consideration is Ufactory&amp;rsquo;s Lite6 manipulator and the simulation/setup tool used is Drake.&lt;/p&gt;&#xA;&lt;p&gt;All the code used in this post can be found in my &lt;a href=&#34;https://github.com/shrenikm/manipulation_research&#34;&gt;repo&lt;/a&gt;. But before we start, some explanations are in order.&lt;/p&gt;&#xA;&lt;p&gt;Lite6?&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://www.ufactory.cc/lite-6-collaborative-robot/&#34;&gt;Lite6&lt;/a&gt; is one of the more economical (not to be confused with cheap) manipulators one can buy, especially for personal research where you&amp;rsquo;re not going to be spending tens of thousands of dollars on some of the more well established robots out there. It&amp;rsquo;s well built, has surprisingly good specifications for the price point, and comes with an integrated controller. You can get a parallel and vacuum gripper for it, but also comes with hardware interfaces that can support custom grippers. The product is well supported and their API (python and C++) is easy to use. The main pain point is its parallel gripper, which can only open by 1.6 cm. This severely limits the type of objects you can pick/place, but luckily for us, pick and place is only a small part of robotic manipulation!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multi Vehicle Mixed Integer Programming</title>
      <link>https://shrenikm.com/posts/2023-12-24-multi-vehicle-mixed-integer-programming/</link>
      <pubDate>Sun, 24 Dec 2023 18:54:32 -0800</pubDate><author>shrenik95@gmail.com (Shrenik M)</author>
      <guid>https://shrenikm.com/posts/2023-12-24-multi-vehicle-mixed-integer-programming/</guid>
      <description>&lt;!--- Post 5 --&gt;&#xA;&lt;p&gt;In this post, we take a look at this &lt;a href=&#34;#references&#34;&gt;$[1]$&lt;/a&gt; paper, which introduces a simple, yet interesting approach to solving a multi-vehicle path planning problem.&lt;/p&gt;&#xA;&lt;p&gt;My implementation of the algorithm that was used to evaluate its performance and generate all the results in this post can be found &lt;a href=&#34;https://github.com/shrenikm/Atium/tree/main/atium/implementations/multi_vehicle_mip&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;$\newcommand{\ith}{i^{th}}$&#xA;$\newcommand{\pth}{p^{th}}$&#xA;$\newcommand{\qth}{q^{th}}$&#xA;$\newcommand{\lth}{l^{th}}$&#xA;$\newcommand{\MR}{\mathbb{R}}$&#xA;$\newcommand{\xpi}{x_{pi}}$&#xA;$\newcommand{\ypi}{y_{pi}}$&#xA;$\newcommand{\xqi}{x_{qi}}$&#xA;$\newcommand{\yqi}{y_{qi}}$&#xA;$\newcommand{\xmin}{x_{min}}$&#xA;$\newcommand{\xmax}{x_{max}}$&#xA;$\newcommand{\ymin}{y_{min}}$&#xA;$\newcommand{\ymax}{y_{max}}$&#xA;$\newcommand{\xlmin}{x_{l,min}}$&#xA;$\newcommand{\xlmax}{x_{l,max}}$&#xA;$\newcommand{\ylmin}{y_{l,min}}$&#xA;$\newcommand{\ylmax}{y_{l,max}}$&#xA;$\newcommand{\xlimin}{x_{li,min}}$&#xA;$\newcommand{\xlimax}{x_{li,max}}$&#xA;$\newcommand{\ylimin}{y_{li,min}}$&#xA;$\newcommand{\ylimax}{y_{li,max}}$&#xA;$\newcommand{\cplx}{c_{pl,x}}$&#xA;$\newcommand{\cply}{c_{pl,y}}$&#xA;$\newcommand{\dpqx}{d_{pq,x}}$&#xA;$\newcommand{\dpqy}{d_{pq,y}}$&#xA;$\newcommand{\tpli}{t_{pli}}$&#xA;$\newcommand{\spi}{s_{pi}}$&#xA;$\newcommand{\spij}{s_{pij}}$&#xA;$\newcommand{\spinext}{s_{p,i+1}}$&#xA;$\newcommand{\spn}{s_{pN}}$&#xA;$\newcommand{\spf}{s_{pf}}$&#xA;$\newcommand{\wpi}{w_{pi}}$&#xA;$\newcommand{\wpij}{w_{pij}}$&#xA;$\newcommand{\wpn}{w_{pN}}$&#xA;$\newcommand{\upi}{u_{pi}}$&#xA;$\newcommand{\upik}{u_{pik}}$&#xA;$\newcommand{\vpi}{v_{pi}}$&#xA;$\newcommand{\vpik}{v_{pik}}$&#xA;$\newcommand{\Ap}{A_{p}}$&#xA;$\newcommand{\Bp}{B_{p}}$&#xA;$\newcommand{\qp}{q_{p}}$&#xA;$\newcommand{\rp}{r_{p}}$&#xA;$\newcommand{\pp}{p_{p}}$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implicit Euler integration using Newton-Raphson</title>
      <link>https://shrenikm.com/posts/2021-09-25-implicit-euler-integration-using-newton-raphson/</link>
      <pubDate>Sat, 25 Sep 2021 20:11:57 -0700</pubDate><author>shrenik95@gmail.com (Shrenik M)</author>
      <guid>https://shrenikm.com/posts/2021-09-25-implicit-euler-integration-using-newton-raphson/</guid>
      <description>&lt;!--&#xA;Latex commands&#xA;--&gt;&#xA;&lt;p&gt;$\newcommand{\Dt}{\Delta t}$&lt;/p&gt;&#xA;&lt;!-- Post 4 --&gt;&#xA;&lt;p&gt;We take a look at the implicit or backward Euler integration scheme for computing numerical solutions of ordinary differential equations. We will go over the process of integrating using the backward Euler method and make comparisons to the more well known forward Euler method.&lt;/p&gt;&#xA;&lt;p&gt;Numerical integration is extremely important when it comes to simulating real world physical systems. For robotic systems, we usually have a continuous time state dynamics that tells us how the system behaves upon the application of a certain control signal.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
