<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Control on </title>
    <link>https://shrenikm.com/tags/control/</link>
    <description>Recent content in Control on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>shrenik95@gmail.com (Shrenik M)</managingEditor>
    <webMaster>shrenik95@gmail.com (Shrenik M)</webMaster>
    <lastBuildDate>Wed, 03 Apr 2024 22:31:49 -0700</lastBuildDate>
    <atom:link href="https://shrenikm.com/tags/control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZMP: Generating Bipedal Walking Trajectories</title>
      <link>https://shrenikm.com/posts/2024-04-03-zmp-generating-bipedal-walking-trajectories/</link>
      <pubDate>Wed, 03 Apr 2024 22:31:49 -0700</pubDate><author>shrenik95@gmail.com (Shrenik M)</author>
      <guid>https://shrenikm.com/posts/2024-04-03-zmp-generating-bipedal-walking-trajectories/</guid>
      <description>&lt;!--- Post 8 --&gt;&#xA;&lt;p&gt;Legged robot research has been an active area of study since the late nineties. Let&amp;rsquo;s take a look at how we can generate walking trajectories for bipedal robots, using some of these ideas.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;The Objective:&lt;/strong&gt; Implement a quick and dirty way of generating walking trajectories&lt;br&gt;&#xA;&lt;strong&gt;Constraints:&lt;/strong&gt; Do it quickly. Minimize sophistication. Anything goes!&lt;/p&gt;&#xA;&lt;p&gt;What this post will cover:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Overview of the minimal set of ideas required to develop walking algorithms&lt;/li&gt;&#xA;&lt;li&gt;Computation of bipedal joint trajectories for a simple walking gait&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;What will not be covered:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting Up a Robotic Manipulator</title>
      <link>https://shrenikm.com/posts/2024-03-08-setting-up-a-manipulator/</link>
      <pubDate>Fri, 08 Mar 2024 22:11:21 -0800</pubDate><author>shrenik95@gmail.com (Shrenik M)</author>
      <guid>https://shrenikm.com/posts/2024-03-08-setting-up-a-manipulator/</guid>
      <description>&lt;!-- Post 7 --&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s take a look at how we can set up a framework for streamlined simulation and hardware control of a manipulator. The robot under consideration is Ufactory&amp;rsquo;s Lite6 manipulator and the simulation/setup tool used is Drake.&lt;/p&gt;&#xA;&lt;p&gt;All the code used in this post can be found in my &lt;a href=&#34;https://github.com/shrenikm/manipulation_research&#34;&gt;repo&lt;/a&gt;. But before we start, some explanations are in order.&lt;/p&gt;&#xA;&lt;p&gt;Lite6?&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://www.ufactory.cc/lite-6-collaborative-robot/&#34;&gt;Lite6&lt;/a&gt; is one of the more economical (not to be confused with cheap) manipulators one can buy, especially for personal research where you&amp;rsquo;re not going to be spending tens of thousands of dollars on some of the more well established robots out there. It&amp;rsquo;s well built, has surprisingly good specifications for the price point, and comes with an integrated controller. You can get a parallel and vacuum gripper for it, but also comes with hardware interfaces that can support custom grippers. The product is well supported and their API (python and C++) is easy to use. The main pain point is its parallel gripper, which can only open by 1.6 cm. This severely limits the type of objects you can pick/place, but luckily for us, pick and place is only a small part of robotic manipulation!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding TrajOpt</title>
      <link>https://shrenikm.com/posts/2024-01-06-understanding-trajopt/</link>
      <pubDate>Sat, 06 Jan 2024 11:11:12 -0800</pubDate><author>shrenik95@gmail.com (Shrenik M)</author>
      <guid>https://shrenikm.com/posts/2024-01-06-understanding-trajopt/</guid>
      <description>&lt;!-- Post 6 --&gt;&#xA;&lt;p&gt;TrajOpt &lt;a href=&#34;#ref1&#34;&gt;[1]&lt;/a&gt; is an optimization based approach for motion planning. More specifically, it uses a sequential convex optimization procedure along with a formulation of collision constraints to find locally optimal planning trajectories, even for robotic systems that have a large number of degrees of freedom.&lt;/p&gt;&#xA;&lt;p&gt;This post will go into the details of the optimization part, and give an outline of how it can be implemented. My implementation can be found &lt;a href=&#34;https://github.com/shrenikm/Atium/tree/main/atium/implementations/trajopt&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
